using System.Collections;
using Kolyteon.Common;
using Kolyteon.GraphColouring;

namespace Kolyteon.Tests.Integration.ProblemSolving.TestData;

public static partial class ExampleProblems
{
    public static class GraphColouring
    {
        public sealed class Solvable : IEnumerable<object[]>
        {
            public IEnumerator<object[]> GetEnumerator()
            {
                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Black, Colour.White)
                        .AddNode(Node.FromName("N00"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Black, Colour.White)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddEdge(Edge.Parse("(N00)-(N01)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Black)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Green, Colour.Red, Colour.Yellow, Colour.Blue)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddNode(Node.FromName("N03"))
                        .AddEdge(Edge.Parse("(N00)-(N02)"))
                        .AddEdge(Edge.Parse("(N00)-(N03)"))
                        .AddEdge(Edge.Parse("(N01)-(N02)"))
                        .AddEdge(Edge.Parse("(N01)-(N03)"))
                        .AddEdge(Edge.Parse("(N02)-(N03)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Green, Colour.Red, Colour.Yellow, Colour.Blue)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddNode(Node.FromName("N03"))
                        .AddNode(Node.FromName("N04"))
                        .AddEdge(Edge.Parse("(N00)-(N02)"))
                        .AddEdge(Edge.Parse("(N00)-(N03)"))
                        .AddEdge(Edge.Parse("(N01)-(N02)"))
                        .AddEdge(Edge.Parse("(N03)-(N04)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Green, Colour.Red, Colour.Yellow, Colour.Blue)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddNode(Node.FromName("N03"))
                        .AddNode(Node.FromName("N04"))
                        .AddNode(Node.FromName("N05"))
                        .AddEdge(Edge.Parse("(N00)-(N01)"))
                        .AddEdge(Edge.Parse("(N00)-(N02)"))
                        .AddEdge(Edge.Parse("(N00)-(N05)"))
                        .AddEdge(Edge.Parse("(N01)-(N02)"))
                        .AddEdge(Edge.Parse("(N01)-(N03)"))
                        .AddEdge(Edge.Parse("(N02)-(N03)"))
                        .AddEdge(Edge.Parse("(N02)-(N04)"))
                        .AddEdge(Edge.Parse("(N04)-(N05)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Green, Colour.Red, Colour.Yellow, Colour.Blue)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddNode(Node.FromName("N03"))
                        .AddNode(Node.FromName("N04"))
                        .AddNode(Node.FromName("N05"))
                        .AddNode(Node.FromName("N06"))
                        .AddEdge(Edge.Parse("(N00)-(N03)"))
                        .AddEdge(Edge.Parse("(N00)-(N04)"))
                        .AddEdge(Edge.Parse("(N01)-(N02)"))
                        .AddEdge(Edge.Parse("(N01)-(N06)"))
                        .AddEdge(Edge.Parse("(N02)-(N05)"))
                        .AddEdge(Edge.Parse("(N02)-(N06)"))
                        .AddEdge(Edge.Parse("(N03)-(N04)"))
                        .AddEdge(Edge.Parse("(N03)-(N05)"))
                        .AddEdge(Edge.Parse("(N03)-(N06)"))
                        .AddEdge(Edge.Parse("(N05)-(N06)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Green, Colour.Red, Colour.Yellow, Colour.Blue)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddNode(Node.FromName("N03"))
                        .AddNode(Node.FromName("N04"))
                        .AddNode(Node.FromName("N05"))
                        .AddNode(Node.FromName("N06"))
                        .AddNode(Node.FromName("N07"))
                        .AddEdge(Edge.Parse("(N00)-(N03)"))
                        .AddEdge(Edge.Parse("(N00)-(N04)"))
                        .AddEdge(Edge.Parse("(N00)-(N06)"))
                        .AddEdge(Edge.Parse("(N00)-(N07)"))
                        .AddEdge(Edge.Parse("(N01)-(N02)"))
                        .AddEdge(Edge.Parse("(N01)-(N03)"))
                        .AddEdge(Edge.Parse("(N01)-(N04)"))
                        .AddEdge(Edge.Parse("(N01)-(N05)"))
                        .AddEdge(Edge.Parse("(N02)-(N05)"))
                        .AddEdge(Edge.Parse("(N03)-(N05)"))
                        .AddEdge(Edge.Parse("(N04)-(N06)"))
                        .AddEdge(Edge.Parse("(N06)-(N07)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Green, Colour.Red, Colour.Yellow, Colour.Blue)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddNode(Node.FromName("N03"))
                        .AddNode(Node.FromName("N04"))
                        .AddNode(Node.FromName("N05"))
                        .AddNode(Node.FromName("N06"))
                        .AddNode(Node.FromName("N07"))
                        .AddNode(Node.FromName("N08"))
                        .AddEdge(Edge.Parse("(N00)-(N05)"))
                        .AddEdge(Edge.Parse("(N00)-(N06)"))
                        .AddEdge(Edge.Parse("(N01)-(N03)"))
                        .AddEdge(Edge.Parse("(N01)-(N04)"))
                        .AddEdge(Edge.Parse("(N02)-(N03)"))
                        .AddEdge(Edge.Parse("(N02)-(N04)"))
                        .AddEdge(Edge.Parse("(N02)-(N06)"))
                        .AddEdge(Edge.Parse("(N02)-(N07)"))
                        .AddEdge(Edge.Parse("(N03)-(N04)"))
                        .AddEdge(Edge.Parse("(N04)-(N07)"))
                        .AddEdge(Edge.Parse("(N04)-(N08)"))
                        .AddEdge(Edge.Parse("(N05)-(N06)"))
                        .AddEdge(Edge.Parse("(N05)-(N07)"))
                        .AddEdge(Edge.Parse("(N05)-(N08)"))
                        .AddEdge(Edge.Parse("(N07)-(N08)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Green, Colour.Red, Colour.Yellow, Colour.Blue)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddNode(Node.FromName("N03"))
                        .AddNode(Node.FromName("N04"))
                        .AddNode(Node.FromName("N05"))
                        .AddNode(Node.FromName("N06"))
                        .AddNode(Node.FromName("N07"))
                        .AddNode(Node.FromName("N08"))
                        .AddNode(Node.FromName("N09"))
                        .AddEdge(Edge.Parse("(N00)-(N02)"))
                        .AddEdge(Edge.Parse("(N00)-(N03)"))
                        .AddEdge(Edge.Parse("(N00)-(N08)"))
                        .AddEdge(Edge.Parse("(N01)-(N02)"))
                        .AddEdge(Edge.Parse("(N01)-(N05)"))
                        .AddEdge(Edge.Parse("(N01)-(N09)"))
                        .AddEdge(Edge.Parse("(N02)-(N05)"))
                        .AddEdge(Edge.Parse("(N02)-(N08)"))
                        .AddEdge(Edge.Parse("(N03)-(N04)"))
                        .AddEdge(Edge.Parse("(N03)-(N08)"))
                        .AddEdge(Edge.Parse("(N04)-(N06)"))
                        .AddEdge(Edge.Parse("(N04)-(N07)"))
                        .AddEdge(Edge.Parse("(N05)-(N07)"))
                        .AddEdge(Edge.Parse("(N05)-(N08)"))
                        .AddEdge(Edge.Parse("(N05)-(N09)"))
                        .AddEdge(Edge.Parse("(N06)-(N07)"))
                        .AddEdge(Edge.Parse("(N07)-(N08)"))
                        .AddEdge(Edge.Parse("(N07)-(N09)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Green, Colour.Red, Colour.Yellow, Colour.Blue)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddNode(Node.FromName("N03"))
                        .AddNode(Node.FromName("N04"))
                        .AddNode(Node.FromName("N05"))
                        .AddNode(Node.FromName("N06"))
                        .AddNode(Node.FromName("N07"))
                        .AddNode(Node.FromName("N08"))
                        .AddNode(Node.FromName("N09"))
                        .AddNode(Node.FromName("N10"))
                        .AddEdge(Edge.Parse("(N00)-(N01)"))
                        .AddEdge(Edge.Parse("(N00)-(N02)"))
                        .AddEdge(Edge.Parse("(N00)-(N03)"))
                        .AddEdge(Edge.Parse("(N00)-(N04)"))
                        .AddEdge(Edge.Parse("(N00)-(N05)"))
                        .AddEdge(Edge.Parse("(N00)-(N09)"))
                        .AddEdge(Edge.Parse("(N00)-(N10)"))
                        .AddEdge(Edge.Parse("(N01)-(N03)"))
                        .AddEdge(Edge.Parse("(N01)-(N06)"))
                        .AddEdge(Edge.Parse("(N02)-(N09)"))
                        .AddEdge(Edge.Parse("(N02)-(N10)"))
                        .AddEdge(Edge.Parse("(N03)-(N06)"))
                        .AddEdge(Edge.Parse("(N03)-(N07)"))
                        .AddEdge(Edge.Parse("(N03)-(N08)"))
                        .AddEdge(Edge.Parse("(N04)-(N10)"))
                        .AddEdge(Edge.Parse("(N05)-(N09)"))
                        .AddEdge(Edge.Parse("(N06)-(N07)"))
                        .AddEdge(Edge.Parse("(N07)-(N08)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Green, Colour.Red, Colour.Yellow, Colour.Blue)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddNode(Node.FromName("N03"))
                        .AddNode(Node.FromName("N04"))
                        .AddNode(Node.FromName("N05"))
                        .AddNode(Node.FromName("N06"))
                        .AddNode(Node.FromName("N07"))
                        .AddNode(Node.FromName("N08"))
                        .AddNode(Node.FromName("N09"))
                        .AddNode(Node.FromName("N10"))
                        .AddNode(Node.FromName("N11"))
                        .AddEdge(Edge.Parse("(N00)-(N06)"))
                        .AddEdge(Edge.Parse("(N00)-(N07)"))
                        .AddEdge(Edge.Parse("(N00)-(N08)"))
                        .AddEdge(Edge.Parse("(N01)-(N05)"))
                        .AddEdge(Edge.Parse("(N01)-(N09)"))
                        .AddEdge(Edge.Parse("(N01)-(N10)"))
                        .AddEdge(Edge.Parse("(N01)-(N11)"))
                        .AddEdge(Edge.Parse("(N02)-(N03)"))
                        .AddEdge(Edge.Parse("(N02)-(N04)"))
                        .AddEdge(Edge.Parse("(N02)-(N05)"))
                        .AddEdge(Edge.Parse("(N02)-(N06)"))
                        .AddEdge(Edge.Parse("(N02)-(N07)"))
                        .AddEdge(Edge.Parse("(N02)-(N08)"))
                        .AddEdge(Edge.Parse("(N02)-(N10)"))
                        .AddEdge(Edge.Parse("(N02)-(N11)"))
                        .AddEdge(Edge.Parse("(N03)-(N06)"))
                        .AddEdge(Edge.Parse("(N04)-(N07)"))
                        .AddEdge(Edge.Parse("(N05)-(N11)"))
                        .AddEdge(Edge.Parse("(N06)-(N08)"))
                        .AddEdge(Edge.Parse("(N07)-(N08)"))
                        .AddEdge(Edge.Parse("(N09)-(N10)"))
                        .AddEdge(Edge.Parse("(N10)-(N11)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Green, Colour.Red, Colour.Yellow, Colour.Blue)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddNode(Node.FromName("N03"))
                        .AddNode(Node.FromName("N04"))
                        .AddNode(Node.FromName("N05"))
                        .AddNode(Node.FromName("N06"))
                        .AddNode(Node.FromName("N07"))
                        .AddNode(Node.FromName("N08"))
                        .AddNode(Node.FromName("N09"))
                        .AddNode(Node.FromName("N10"))
                        .AddNode(Node.FromName("N11"))
                        .AddNode(Node.FromName("N12"))
                        .AddEdge(Edge.Parse("(N00)-(N02)"))
                        .AddEdge(Edge.Parse("(N00)-(N04)"))
                        .AddEdge(Edge.Parse("(N00)-(N10)"))
                        .AddEdge(Edge.Parse("(N00)-(N11)"))
                        .AddEdge(Edge.Parse("(N00)-(N12)"))
                        .AddEdge(Edge.Parse("(N01)-(N07)"))
                        .AddEdge(Edge.Parse("(N01)-(N08)"))
                        .AddEdge(Edge.Parse("(N01)-(N10)"))
                        .AddEdge(Edge.Parse("(N01)-(N12)"))
                        .AddEdge(Edge.Parse("(N02)-(N04)"))
                        .AddEdge(Edge.Parse("(N03)-(N04)"))
                        .AddEdge(Edge.Parse("(N03)-(N05)"))
                        .AddEdge(Edge.Parse("(N03)-(N06)"))
                        .AddEdge(Edge.Parse("(N03)-(N08)"))
                        .AddEdge(Edge.Parse("(N04)-(N06)"))
                        .AddEdge(Edge.Parse("(N04)-(N11)"))
                        .AddEdge(Edge.Parse("(N05)-(N06)"))
                        .AddEdge(Edge.Parse("(N05)-(N07)"))
                        .AddEdge(Edge.Parse("(N05)-(N09)"))
                        .AddEdge(Edge.Parse("(N06)-(N09)"))
                        .AddEdge(Edge.Parse("(N07)-(N08)"))
                        .AddEdge(Edge.Parse("(N08)-(N11)"))
                        .AddEdge(Edge.Parse("(N10)-(N11)"))
                        .AddEdge(Edge.Parse("(N10)-(N12)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Green, Colour.Red, Colour.Yellow, Colour.Blue)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddNode(Node.FromName("N03"))
                        .AddNode(Node.FromName("N04"))
                        .AddNode(Node.FromName("N05"))
                        .AddNode(Node.FromName("N06"))
                        .AddNode(Node.FromName("N07"))
                        .AddNode(Node.FromName("N08"))
                        .AddNode(Node.FromName("N09"))
                        .AddNode(Node.FromName("N10"))
                        .AddNode(Node.FromName("N11"))
                        .AddNode(Node.FromName("N12"))
                        .AddNode(Node.FromName("N13"))
                        .AddEdge(Edge.Parse("(N00)-(N03)"))
                        .AddEdge(Edge.Parse("(N00)-(N05)"))
                        .AddEdge(Edge.Parse("(N00)-(N06)"))
                        .AddEdge(Edge.Parse("(N00)-(N07)"))
                        .AddEdge(Edge.Parse("(N00)-(N08)"))
                        .AddEdge(Edge.Parse("(N00)-(N09)"))
                        .AddEdge(Edge.Parse("(N00)-(N13)"))
                        .AddEdge(Edge.Parse("(N01)-(N02)"))
                        .AddEdge(Edge.Parse("(N01)-(N03)"))
                        .AddEdge(Edge.Parse("(N01)-(N05)"))
                        .AddEdge(Edge.Parse("(N01)-(N10)"))
                        .AddEdge(Edge.Parse("(N01)-(N12)"))
                        .AddEdge(Edge.Parse("(N02)-(N04)"))
                        .AddEdge(Edge.Parse("(N02)-(N10)"))
                        .AddEdge(Edge.Parse("(N02)-(N11)"))
                        .AddEdge(Edge.Parse("(N02)-(N12)"))
                        .AddEdge(Edge.Parse("(N03)-(N05)"))
                        .AddEdge(Edge.Parse("(N03)-(N08)"))
                        .AddEdge(Edge.Parse("(N04)-(N09)"))
                        .AddEdge(Edge.Parse("(N04)-(N10)"))
                        .AddEdge(Edge.Parse("(N04)-(N13)"))
                        .AddEdge(Edge.Parse("(N05)-(N07)"))
                        .AddEdge(Edge.Parse("(N06)-(N07)"))
                        .AddEdge(Edge.Parse("(N06)-(N11)"))
                        .AddEdge(Edge.Parse("(N07)-(N12)"))
                        .AddEdge(Edge.Parse("(N08)-(N09)"))
                        .AddEdge(Edge.Parse("(N08)-(N10)"))
                        .AddEdge(Edge.Parse("(N09)-(N13)"))
                        .AddEdge(Edge.Parse("(N11)-(N12)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Green, Colour.Red, Colour.Yellow, Colour.Blue)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddNode(Node.FromName("N03"))
                        .AddNode(Node.FromName("N04"))
                        .AddNode(Node.FromName("N05"))
                        .AddNode(Node.FromName("N06"))
                        .AddNode(Node.FromName("N07"))
                        .AddNode(Node.FromName("N08"))
                        .AddNode(Node.FromName("N09"))
                        .AddNode(Node.FromName("N10"))
                        .AddNode(Node.FromName("N11"))
                        .AddNode(Node.FromName("N12"))
                        .AddNode(Node.FromName("N13"))
                        .AddNode(Node.FromName("N14"))
                        .AddEdge(Edge.Parse("(N00)-(N01)"))
                        .AddEdge(Edge.Parse("(N00)-(N05)"))
                        .AddEdge(Edge.Parse("(N01)-(N05)"))
                        .AddEdge(Edge.Parse("(N01)-(N06)"))
                        .AddEdge(Edge.Parse("(N01)-(N09)"))
                        .AddEdge(Edge.Parse("(N02)-(N05)"))
                        .AddEdge(Edge.Parse("(N02)-(N06)"))
                        .AddEdge(Edge.Parse("(N02)-(N07)"))
                        .AddEdge(Edge.Parse("(N02)-(N11)"))
                        .AddEdge(Edge.Parse("(N03)-(N08)"))
                        .AddEdge(Edge.Parse("(N03)-(N10)"))
                        .AddEdge(Edge.Parse("(N03)-(N14)"))
                        .AddEdge(Edge.Parse("(N04)-(N07)"))
                        .AddEdge(Edge.Parse("(N04)-(N08)"))
                        .AddEdge(Edge.Parse("(N04)-(N12)"))
                        .AddEdge(Edge.Parse("(N04)-(N13)"))
                        .AddEdge(Edge.Parse("(N05)-(N06)"))
                        .AddEdge(Edge.Parse("(N06)-(N07)"))
                        .AddEdge(Edge.Parse("(N07)-(N08)"))
                        .AddEdge(Edge.Parse("(N07)-(N09)"))
                        .AddEdge(Edge.Parse("(N07)-(N10)"))
                        .AddEdge(Edge.Parse("(N07)-(N11)"))
                        .AddEdge(Edge.Parse("(N07)-(N12)"))
                        .AddEdge(Edge.Parse("(N08)-(N10)"))
                        .AddEdge(Edge.Parse("(N08)-(N14)"))
                        .AddEdge(Edge.Parse("(N09)-(N10)"))
                        .AddEdge(Edge.Parse("(N11)-(N12)"))
                        .AddEdge(Edge.Parse("(N11)-(N13)"))
                        .AddEdge(Edge.Parse("(N12)-(N13)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Green, Colour.Red, Colour.Yellow, Colour.Blue)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddNode(Node.FromName("N03"))
                        .AddNode(Node.FromName("N04"))
                        .AddNode(Node.FromName("N05"))
                        .AddNode(Node.FromName("N06"))
                        .AddNode(Node.FromName("N07"))
                        .AddNode(Node.FromName("N08"))
                        .AddNode(Node.FromName("N09"))
                        .AddNode(Node.FromName("N10"))
                        .AddNode(Node.FromName("N11"))
                        .AddNode(Node.FromName("N12"))
                        .AddNode(Node.FromName("N13"))
                        .AddNode(Node.FromName("N14"))
                        .AddNode(Node.FromName("N15"))
                        .AddEdge(Edge.Parse("(N00)-(N07)"))
                        .AddEdge(Edge.Parse("(N00)-(N08)"))
                        .AddEdge(Edge.Parse("(N00)-(N10)"))
                        .AddEdge(Edge.Parse("(N00)-(N15)"))
                        .AddEdge(Edge.Parse("(N01)-(N02)"))
                        .AddEdge(Edge.Parse("(N01)-(N05)"))
                        .AddEdge(Edge.Parse("(N02)-(N05)"))
                        .AddEdge(Edge.Parse("(N02)-(N06)"))
                        .AddEdge(Edge.Parse("(N02)-(N07)"))
                        .AddEdge(Edge.Parse("(N03)-(N04)"))
                        .AddEdge(Edge.Parse("(N03)-(N08)"))
                        .AddEdge(Edge.Parse("(N03)-(N10)"))
                        .AddEdge(Edge.Parse("(N03)-(N12)"))
                        .AddEdge(Edge.Parse("(N04)-(N06)"))
                        .AddEdge(Edge.Parse("(N04)-(N10)"))
                        .AddEdge(Edge.Parse("(N04)-(N11)"))
                        .AddEdge(Edge.Parse("(N04)-(N12)"))
                        .AddEdge(Edge.Parse("(N06)-(N07)"))
                        .AddEdge(Edge.Parse("(N07)-(N10)"))
                        .AddEdge(Edge.Parse("(N07)-(N13)"))
                        .AddEdge(Edge.Parse("(N07)-(N14)"))
                        .AddEdge(Edge.Parse("(N07)-(N15)"))
                        .AddEdge(Edge.Parse("(N08)-(N09)"))
                        .AddEdge(Edge.Parse("(N08)-(N13)"))
                        .AddEdge(Edge.Parse("(N08)-(N15)"))
                        .AddEdge(Edge.Parse("(N09)-(N14)"))
                        .AddEdge(Edge.Parse("(N11)-(N12)"))
                        .AddEdge(Edge.Parse("(N13)-(N14)"))
                        .AddEdge(Edge.Parse("(N13)-(N15)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Green, Colour.Red, Colour.Yellow, Colour.Blue)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddNode(Node.FromName("N03"))
                        .AddNode(Node.FromName("N04"))
                        .AddNode(Node.FromName("N05"))
                        .AddNode(Node.FromName("N06"))
                        .AddNode(Node.FromName("N07"))
                        .AddNode(Node.FromName("N08"))
                        .AddNode(Node.FromName("N09"))
                        .AddNode(Node.FromName("N10"))
                        .AddNode(Node.FromName("N11"))
                        .AddNode(Node.FromName("N12"))
                        .AddNode(Node.FromName("N13"))
                        .AddNode(Node.FromName("N14"))
                        .AddNode(Node.FromName("N15"))
                        .AddNode(Node.FromName("N16"))
                        .AddEdge(Edge.Parse("(N00)-(N06)"))
                        .AddEdge(Edge.Parse("(N00)-(N09)"))
                        .AddEdge(Edge.Parse("(N00)-(N11)"))
                        .AddEdge(Edge.Parse("(N00)-(N13)"))
                        .AddEdge(Edge.Parse("(N01)-(N02)"))
                        .AddEdge(Edge.Parse("(N01)-(N03)"))
                        .AddEdge(Edge.Parse("(N01)-(N04)"))
                        .AddEdge(Edge.Parse("(N01)-(N08)"))
                        .AddEdge(Edge.Parse("(N02)-(N04)"))
                        .AddEdge(Edge.Parse("(N02)-(N06)"))
                        .AddEdge(Edge.Parse("(N03)-(N08)"))
                        .AddEdge(Edge.Parse("(N04)-(N05)"))
                        .AddEdge(Edge.Parse("(N04)-(N08)"))
                        .AddEdge(Edge.Parse("(N04)-(N09)"))
                        .AddEdge(Edge.Parse("(N04)-(N12)"))
                        .AddEdge(Edge.Parse("(N04)-(N13)"))
                        .AddEdge(Edge.Parse("(N05)-(N09)"))
                        .AddEdge(Edge.Parse("(N05)-(N10)"))
                        .AddEdge(Edge.Parse("(N05)-(N11)"))
                        .AddEdge(Edge.Parse("(N05)-(N12)"))
                        .AddEdge(Edge.Parse("(N05)-(N14)"))
                        .AddEdge(Edge.Parse("(N06)-(N13)"))
                        .AddEdge(Edge.Parse("(N07)-(N08)"))
                        .AddEdge(Edge.Parse("(N07)-(N14)"))
                        .AddEdge(Edge.Parse("(N07)-(N15)"))
                        .AddEdge(Edge.Parse("(N07)-(N16)"))
                        .AddEdge(Edge.Parse("(N08)-(N12)"))
                        .AddEdge(Edge.Parse("(N08)-(N15)"))
                        .AddEdge(Edge.Parse("(N09)-(N13)"))
                        .AddEdge(Edge.Parse("(N10)-(N11)"))
                        .AddEdge(Edge.Parse("(N10)-(N14)"))
                        .AddEdge(Edge.Parse("(N10)-(N16)"))
                        .AddEdge(Edge.Parse("(N12)-(N15)"))
                        .AddEdge(Edge.Parse("(N14)-(N15)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Green, Colour.Red, Colour.Yellow, Colour.Blue)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddNode(Node.FromName("N03"))
                        .AddNode(Node.FromName("N04"))
                        .AddNode(Node.FromName("N05"))
                        .AddNode(Node.FromName("N06"))
                        .AddNode(Node.FromName("N07"))
                        .AddNode(Node.FromName("N08"))
                        .AddNode(Node.FromName("N09"))
                        .AddNode(Node.FromName("N10"))
                        .AddNode(Node.FromName("N11"))
                        .AddNode(Node.FromName("N12"))
                        .AddNode(Node.FromName("N13"))
                        .AddNode(Node.FromName("N14"))
                        .AddNode(Node.FromName("N15"))
                        .AddNode(Node.FromName("N16"))
                        .AddNode(Node.FromName("N17"))
                        .AddEdge(Edge.Parse("(N00)-(N05)"))
                        .AddEdge(Edge.Parse("(N00)-(N08)"))
                        .AddEdge(Edge.Parse("(N00)-(N16)"))
                        .AddEdge(Edge.Parse("(N00)-(N17)"))
                        .AddEdge(Edge.Parse("(N01)-(N03)"))
                        .AddEdge(Edge.Parse("(N01)-(N04)"))
                        .AddEdge(Edge.Parse("(N01)-(N12)"))
                        .AddEdge(Edge.Parse("(N01)-(N14)"))
                        .AddEdge(Edge.Parse("(N02)-(N04)"))
                        .AddEdge(Edge.Parse("(N02)-(N07)"))
                        .AddEdge(Edge.Parse("(N02)-(N08)"))
                        .AddEdge(Edge.Parse("(N02)-(N09)"))
                        .AddEdge(Edge.Parse("(N02)-(N13)"))
                        .AddEdge(Edge.Parse("(N03)-(N04)"))
                        .AddEdge(Edge.Parse("(N03)-(N06)"))
                        .AddEdge(Edge.Parse("(N04)-(N05)"))
                        .AddEdge(Edge.Parse("(N04)-(N06)"))
                        .AddEdge(Edge.Parse("(N04)-(N09)"))
                        .AddEdge(Edge.Parse("(N04)-(N10)"))
                        .AddEdge(Edge.Parse("(N04)-(N12)"))
                        .AddEdge(Edge.Parse("(N04)-(N13)"))
                        .AddEdge(Edge.Parse("(N05)-(N08)"))
                        .AddEdge(Edge.Parse("(N05)-(N10)"))
                        .AddEdge(Edge.Parse("(N05)-(N11)"))
                        .AddEdge(Edge.Parse("(N05)-(N12)"))
                        .AddEdge(Edge.Parse("(N06)-(N13)"))
                        .AddEdge(Edge.Parse("(N07)-(N08)"))
                        .AddEdge(Edge.Parse("(N08)-(N09)"))
                        .AddEdge(Edge.Parse("(N08)-(N10)"))
                        .AddEdge(Edge.Parse("(N08)-(N17)"))
                        .AddEdge(Edge.Parse("(N09)-(N10)"))
                        .AddEdge(Edge.Parse("(N11)-(N12)"))
                        .AddEdge(Edge.Parse("(N11)-(N14)"))
                        .AddEdge(Edge.Parse("(N11)-(N16)"))
                        .AddEdge(Edge.Parse("(N14)-(N15)"))
                        .AddEdge(Edge.Parse("(N15)-(N16)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Black, Colour.Aqua, Colour.Fuchsia, Colour.Yellow)
                        .AddNodes([
                            Node.FromName("NSW"),
                            Node.FromName("NT"),
                            Node.FromName("Q"),
                            Node.FromName("SA"),
                            Node.FromName("T"),
                            Node.FromName("V"),
                            Node.FromName("WA")
                        ])
                        .AddEdges([
                                Edge.Parse("(NSW)-(Q)"),
                                Edge.Parse("(NSW)-(SA)"),
                                Edge.Parse("(NSW)-(V)"),
                                Edge.Parse("(NT)-(Q)"),
                                Edge.Parse("(NT)-(SA)"),
                                Edge.Parse("(NT)-(WA)"),
                                Edge.Parse("(Q)-(SA)"),
                                Edge.Parse("(SA)-(V)"),
                                Edge.Parse("(SA)-(WA)")
                            ]
                        ).Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Red, Colour.White, Colour.Blue)
                        .AddNodes([
                            Node.FromName("NSW"),
                            Node.FromName("NT"),
                            Node.FromName("Q"),
                            Node.FromName("SA"),
                            Node.FromName("T"),
                            Node.FromName("V"),
                            Node.FromName("WA")
                        ])
                        .AddEdges([
                                Edge.Parse("(NSW)-(Q)"),
                                Edge.Parse("(NSW)-(SA)"),
                                Edge.Parse("(NSW)-(V)"),
                                Edge.Parse("(NT)-(Q)"),
                                Edge.Parse("(NT)-(SA)"),
                                Edge.Parse("(NT)-(WA)"),
                                Edge.Parse("(Q)-(SA)"),
                                Edge.Parse("(SA)-(V)"),
                                Edge.Parse("(SA)-(WA)")
                            ]
                        ).Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Black, Colour.Aqua, Colour.Fuchsia, Colour.Yellow)
                        .AddNodes([
                            Node.FromName("A01"),
                            Node.FromName("A02"),
                            Node.FromName("A03"),
                            Node.FromName("A04"),
                            Node.FromName("A05"),
                            Node.FromName("A06"),
                            Node.FromName("A07"),
                            Node.FromName("A08"),
                            Node.FromName("A09"),
                            Node.FromName("A10"),
                            Node.FromName("A11"),
                            Node.FromName("A12"),
                            Node.FromName("A13"),
                            Node.FromName("A14"),
                            Node.FromName("A15"),
                            Node.FromName("A16"),
                            Node.FromName("A17"),
                            Node.FromName("A18"),
                            Node.FromName("A19"),
                            Node.FromName("A20")
                        ]).AddEdges([
                            Edge.Parse("(A01)-(A02)"),
                            Edge.Parse("(A01)-(A03)"),
                            Edge.Parse("(A01)-(A04)"),
                            Edge.Parse("(A01)-(A06)"),
                            Edge.Parse("(A01)-(A07)"),
                            Edge.Parse("(A01)-(A08)"),
                            Edge.Parse("(A01)-(A09)"),
                            Edge.Parse("(A02)-(A03)"),
                            Edge.Parse("(A02)-(A09)"),
                            Edge.Parse("(A02)-(A10)"),
                            Edge.Parse("(A03)-(A04)"),
                            Edge.Parse("(A03)-(A10)"),
                            Edge.Parse("(A03)-(A11)"),
                            Edge.Parse("(A04)-(A05)"),
                            Edge.Parse("(A04)-(A11)"),
                            Edge.Parse("(A04)-(A12)"),
                            Edge.Parse("(A05)-(A06)"),
                            Edge.Parse("(A05)-(A13)"),
                            Edge.Parse("(A05)-(A14)"),
                            Edge.Parse("(A06)-(A07)"),
                            Edge.Parse("(A06)-(A14)"),
                            Edge.Parse("(A06)-(A15)"),
                            Edge.Parse("(A07)-(A08)"),
                            Edge.Parse("(A07)-(A15)"),
                            Edge.Parse("(A07)-(A16)"),
                            Edge.Parse("(A08)-(A09)"),
                            Edge.Parse("(A08)-(A16)"),
                            Edge.Parse("(A08)-(A17)"),
                            Edge.Parse("(A09)-(A10)"),
                            Edge.Parse("(A09)-(A18)"),
                            Edge.Parse("(A10)-(A11)"),
                            Edge.Parse("(A10)-(A18)"),
                            Edge.Parse("(A10)-(A19)"),
                            Edge.Parse("(A11)-(A12)"),
                            Edge.Parse("(A11)-(A20)"),
                            Edge.Parse("(A12)-(A13)"),
                            Edge.Parse("(A12)-(A20)"),
                            Edge.Parse("(A13)-(A14)"),
                            Edge.Parse("(A14)-(A15)"),
                            Edge.Parse("(A15)-(A16)"),
                            Edge.Parse("(A16)-(A17)"),
                            Edge.Parse("(A17)-(A18)"),
                            Edge.Parse("(A18)-(A19)"),
                            Edge.Parse("(A19)-(A20)")
                        ]).Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Black, Colour.Aqua, Colour.Fuchsia, Colour.Yellow)
                        .AddNodes([
                            Node.FromName("AK"),
                            Node.FromName("AL"),
                            Node.FromName("AR"),
                            Node.FromName("AS"),
                            Node.FromName("AZ"),
                            Node.FromName("CA"),
                            Node.FromName("CO"),
                            Node.FromName("CT"),
                            Node.FromName("DC"),
                            Node.FromName("DE"),
                            Node.FromName("FL"),
                            Node.FromName("GA"),
                            Node.FromName("GU"),
                            Node.FromName("HI"),
                            Node.FromName("IA"),
                            Node.FromName("ID"),
                            Node.FromName("IL"),
                            Node.FromName("IN"),
                            Node.FromName("KS"),
                            Node.FromName("KY"),
                            Node.FromName("LA"),
                            Node.FromName("MA"),
                            Node.FromName("MD"),
                            Node.FromName("ME"),
                            Node.FromName("MI"),
                            Node.FromName("MN"),
                            Node.FromName("MO"),
                            Node.FromName("MP"),
                            Node.FromName("MS"),
                            Node.FromName("MT"),
                            Node.FromName("NC"),
                            Node.FromName("ND"),
                            Node.FromName("NE"),
                            Node.FromName("NH"),
                            Node.FromName("NJ"),
                            Node.FromName("NM"),
                            Node.FromName("NV"),
                            Node.FromName("NY"),
                            Node.FromName("OH"),
                            Node.FromName("OK"),
                            Node.FromName("OR"),
                            Node.FromName("PA"),
                            Node.FromName("PR"),
                            Node.FromName("RI"),
                            Node.FromName("SC"),
                            Node.FromName("SD"),
                            Node.FromName("TN"),
                            Node.FromName("TX"),
                            Node.FromName("UT"),
                            Node.FromName("VA"),
                            Node.FromName("VI"),
                            Node.FromName("VT"),
                            Node.FromName("WA"),
                            Node.FromName("WI"),
                            Node.FromName("WV"),
                            Node.FromName("WY")
                        ])
                        .AddEdges([
                            Edge.Parse("(AL)-(FL)"),
                            Edge.Parse("(AL)-(GA)"),
                            Edge.Parse("(AL)-(MS)"),
                            Edge.Parse("(AL)-(TN)"),
                            Edge.Parse("(AR)-(LA)"),
                            Edge.Parse("(AR)-(MO)"),
                            Edge.Parse("(AR)-(MS)"),
                            Edge.Parse("(AR)-(OK)"),
                            Edge.Parse("(AR)-(TN)"),
                            Edge.Parse("(AR)-(TX)"),
                            Edge.Parse("(AZ)-(CA)"),
                            Edge.Parse("(AZ)-(NM)"),
                            Edge.Parse("(AZ)-(NV)"),
                            Edge.Parse("(AZ)-(UT)"),
                            Edge.Parse("(CA)-(NV)"),
                            Edge.Parse("(CA)-(OR)"),
                            Edge.Parse("(CO)-(KS)"),
                            Edge.Parse("(CO)-(NE)"),
                            Edge.Parse("(CO)-(NM)"),
                            Edge.Parse("(CO)-(OK)"),
                            Edge.Parse("(CO)-(UT)"),
                            Edge.Parse("(CO)-(WY)"),
                            Edge.Parse("(CT)-(MA)"),
                            Edge.Parse("(CT)-(NY)"),
                            Edge.Parse("(CT)-(RI)"),
                            Edge.Parse("(DC)-(MD)"),
                            Edge.Parse("(DC)-(VA)"),
                            Edge.Parse("(DE)-(MD)"),
                            Edge.Parse("(DE)-(NJ)"),
                            Edge.Parse("(DE)-(PA)"),
                            Edge.Parse("(FL)-(GA)"),
                            Edge.Parse("(GA)-(NC)"),
                            Edge.Parse("(GA)-(SC)"),
                            Edge.Parse("(GA)-(TN)"),
                            Edge.Parse("(IA)-(IL)"),
                            Edge.Parse("(IA)-(MN)"),
                            Edge.Parse("(IA)-(MO)"),
                            Edge.Parse("(IA)-(NE)"),
                            Edge.Parse("(IA)-(SD)"),
                            Edge.Parse("(IA)-(WI)"),
                            Edge.Parse("(ID)-(MT)"),
                            Edge.Parse("(ID)-(NV)"),
                            Edge.Parse("(ID)-(OR)"),
                            Edge.Parse("(ID)-(UT)"),
                            Edge.Parse("(ID)-(WA)"),
                            Edge.Parse("(ID)-(WY)"),
                            Edge.Parse("(IL)-(IN)"),
                            Edge.Parse("(IL)-(KY)"),
                            Edge.Parse("(IL)-(MO)"),
                            Edge.Parse("(IL)-(WI)"),
                            Edge.Parse("(IN)-(KY)"),
                            Edge.Parse("(IN)-(MI)"),
                            Edge.Parse("(IN)-(OH)"),
                            Edge.Parse("(KS)-(MO)"),
                            Edge.Parse("(KS)-(NE)"),
                            Edge.Parse("(KS)-(OK)"),
                            Edge.Parse("(KY)-(MO)"),
                            Edge.Parse("(KY)-(OH)"),
                            Edge.Parse("(KY)-(TN)"),
                            Edge.Parse("(KY)-(VA)"),
                            Edge.Parse("(KY)-(WV)"),
                            Edge.Parse("(LA)-(MS)"),
                            Edge.Parse("(LA)-(TX)"),
                            Edge.Parse("(MA)-(NH)"),
                            Edge.Parse("(MA)-(NY)"),
                            Edge.Parse("(MA)-(RI)"),
                            Edge.Parse("(MA)-(VT)"),
                            Edge.Parse("(MD)-(PA)"),
                            Edge.Parse("(MD)-(VA)"),
                            Edge.Parse("(MD)-(WV)"),
                            Edge.Parse("(ME)-(NH)"),
                            Edge.Parse("(MI)-(OH)"),
                            Edge.Parse("(MI)-(WI)"),
                            Edge.Parse("(MN)-(ND)"),
                            Edge.Parse("(MN)-(SD)"),
                            Edge.Parse("(MN)-(WI)"),
                            Edge.Parse("(MO)-(NE)"),
                            Edge.Parse("(MO)-(OK)"),
                            Edge.Parse("(MO)-(TN)"),
                            Edge.Parse("(MS)-(TN)"),
                            Edge.Parse("(MT)-(ND)"),
                            Edge.Parse("(MT)-(SD)"),
                            Edge.Parse("(MT)-(WY)"),
                            Edge.Parse("(NC)-(SC)"),
                            Edge.Parse("(NC)-(TN)"),
                            Edge.Parse("(NC)-(VA)"),
                            Edge.Parse("(ND)-(SD)"),
                            Edge.Parse("(NE)-(SD)"),
                            Edge.Parse("(NE)-(WY)"),
                            Edge.Parse("(NH)-(VT)"),
                            Edge.Parse("(NJ)-(NY)"),
                            Edge.Parse("(NJ)-(PA)"),
                            Edge.Parse("(NM)-(OK)"),
                            Edge.Parse("(NM)-(TX)"),
                            Edge.Parse("(NV)-(OR)"),
                            Edge.Parse("(NV)-(UT)"),
                            Edge.Parse("(NY)-(PA)"),
                            Edge.Parse("(NY)-(VT)"),
                            Edge.Parse("(OH)-(PA)"),
                            Edge.Parse("(OH)-(WV)"),
                            Edge.Parse("(OK)-(TX)"),
                            Edge.Parse("(OR)-(WA)"),
                            Edge.Parse("(PA)-(WV)"),
                            Edge.Parse("(SD)-(WY)"),
                            Edge.Parse("(TN)-(VA)"),
                            Edge.Parse("(UT)-(WY)"),
                            Edge.Parse("(VA)-(WV)")
                        ]).Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Black, Colour.Aqua, Colour.Fuchsia, Colour.Yellow)
                        .AddNodes([
                            Node.FromName("Bailey"),
                            Node.FromName("Biscay"),
                            Node.FromName("Cromarty"),
                            Node.FromName("Dogger"),
                            Node.FromName("Dover"),
                            Node.FromName("Faeroes"),
                            Node.FromName("FairIsle"),
                            Node.FromName("Fastnet"),
                            Node.FromName("Fisher"),
                            Node.FromName("FitzRoy"),
                            Node.FromName("Forth"),
                            Node.FromName("Forties"),
                            Node.FromName("GermanBight"),
                            Node.FromName("Hebrides"),
                            Node.FromName("Humber"),
                            Node.FromName("IrishSea"),
                            Node.FromName("Lundy"),
                            Node.FromName("Malin"),
                            Node.FromName("NorthUtsire"),
                            Node.FromName("Plymouth"),
                            Node.FromName("Portland"),
                            Node.FromName("Rockall"),
                            Node.FromName("Shannon"),
                            Node.FromName("Sole"),
                            Node.FromName("SoutheastIceland"),
                            Node.FromName("SouthUtsire"),
                            Node.FromName("Thames"),
                            Node.FromName("Trafalgar"),
                            Node.FromName("Tyne"),
                            Node.FromName("Viking"),
                            Node.FromName("Wight")
                        ]).AddEdges([
                            Edge.Parse("(Fisher)-(GermanBight)"),
                            Edge.Parse("(Fisher)-(SouthUtsire)"),
                            Edge.Parse("(FitzRoy)-(Sole)"),
                            Edge.Parse("(FitzRoy)-(Trafalgar)"),
                            Edge.Parse("(Forth)-(Forties)"),
                            Edge.Parse("(Forth)-(Tyne)"),
                            Edge.Parse("(Forties)-(SouthUtsire)"),
                            Edge.Parse("(Forties)-(Viking)"),
                            Edge.Parse("(GermanBight)-(Humber)"),
                            Edge.Parse("(Hebrides)-(Malin)"),
                            Edge.Parse("(Hebrides)-(Rockall)"),
                            Edge.Parse("(Humber)-(Thames)"),
                            Edge.Parse("(Humber)-(Tyne)"),
                            Edge.Parse("(IrishSea)-(Lundy)"),
                            Edge.Parse("(IrishSea)-(Malin)"),
                            Edge.Parse("(Lundy)-(Plymouth)"),
                            Edge.Parse("(Malin)-(Rockall)"),
                            Edge.Parse("(NorthUtsire)-(SouthUtsire)"),
                            Edge.Parse("(NorthUtsire)-(Viking)"),
                            Edge.Parse("(Plymouth)-(Portland)"),
                            Edge.Parse("(Plymouth)-(Sole)"),
                            Edge.Parse("(Portland)-(Wight)"),
                            Edge.Parse("(Rockall)-(Shannon)"),
                            Edge.Parse("(Shannon)-(Sole)"),
                            Edge.Parse("(SouthUtsire)-(Viking)")
                        ]).Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Black, Colour.Aqua, Colour.Fuchsia, Colour.Yellow)
                        .AddNodes([
                            Node.FromName("E"),
                            Node.FromName("K"),
                            Node.FromName("N"),
                            Node.FromName("S"),
                            Node.FromName("W")
                        ])
                        .AddEdges([
                            Edge.Parse("(E)-(K)"),
                            Edge.Parse("(E)-(N)"),
                            Edge.Parse("(E)-(S)"),
                            Edge.Parse("(K)-(N)"),
                            Edge.Parse("(K)-(S)"),
                            Edge.Parse("(N)-(S)"),
                            Edge.Parse("(N)-(W)"),
                            Edge.Parse("(S)-(W)")
                        ]).Build()
                ];
            }

            IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
        }

        public sealed class Unsolvable : IEnumerable<object[]>
        {
            public IEnumerator<object[]> GetEnumerator()
            {
                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Black)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddEdge(Edge.Parse("(N00)-(N01)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Black, Colour.White)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddEdge(Edge.Parse("(N00)-(N01)"))
                        .AddEdge(Edge.Parse("(N00)-(N02)"))
                        .AddEdge(Edge.Parse("(N01)-(N02)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseNodeSpecificColours()
                        .AddNodeAndColours(Node.FromName("N00"), Colour.Black, Colour.White)
                        .AddNodeAndColours(Node.FromName("N01"), Colour.Black, Colour.White)
                        .AddNodeAndColours(Node.FromName("N02"))
                        .AddEdge(Edge.Parse("(N00)-(N01)"))
                        .AddEdge(Edge.Parse("(N00)-(N02)"))
                        .AddEdge(Edge.Parse("(N01)-(N02)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Black, Colour.White)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddNode(Node.FromName("N03"))
                        .AddNode(Node.FromName("N04"))
                        .AddNode(Node.FromName("N05"))
                        .AddNode(Node.FromName("N06"))
                        .AddNode(Node.FromName("N07"))
                        .AddNode(Node.FromName("N08"))
                        .AddNode(Node.FromName("N09"))
                        .AddNode(Node.FromName("N10"))
                        .AddNode(Node.FromName("N11"))
                        .AddEdge(Edge.Parse("(N00)-(N06)"))
                        .AddEdge(Edge.Parse("(N00)-(N07)"))
                        .AddEdge(Edge.Parse("(N00)-(N08)"))
                        .AddEdge(Edge.Parse("(N01)-(N05)"))
                        .AddEdge(Edge.Parse("(N01)-(N09)"))
                        .AddEdge(Edge.Parse("(N01)-(N10)"))
                        .AddEdge(Edge.Parse("(N01)-(N11)"))
                        .AddEdge(Edge.Parse("(N02)-(N03)"))
                        .AddEdge(Edge.Parse("(N02)-(N04)"))
                        .AddEdge(Edge.Parse("(N02)-(N05)"))
                        .AddEdge(Edge.Parse("(N02)-(N06)"))
                        .AddEdge(Edge.Parse("(N02)-(N07)"))
                        .AddEdge(Edge.Parse("(N02)-(N08)"))
                        .AddEdge(Edge.Parse("(N02)-(N10)"))
                        .AddEdge(Edge.Parse("(N02)-(N11)"))
                        .AddEdge(Edge.Parse("(N03)-(N06)"))
                        .AddEdge(Edge.Parse("(N04)-(N07)"))
                        .AddEdge(Edge.Parse("(N05)-(N11)"))
                        .AddEdge(Edge.Parse("(N06)-(N08)"))
                        .AddEdge(Edge.Parse("(N07)-(N08)"))
                        .AddEdge(Edge.Parse("(N09)-(N10)"))
                        .AddEdge(Edge.Parse("(N10)-(N11)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Black, Colour.White)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddNode(Node.FromName("N03"))
                        .AddNode(Node.FromName("N04"))
                        .AddNode(Node.FromName("N05"))
                        .AddNode(Node.FromName("N06"))
                        .AddNode(Node.FromName("N07"))
                        .AddNode(Node.FromName("N08"))
                        .AddNode(Node.FromName("N09"))
                        .AddNode(Node.FromName("N10"))
                        .AddNode(Node.FromName("N11"))
                        .AddNode(Node.FromName("N12"))
                        .AddEdge(Edge.Parse("(N00)-(N02)"))
                        .AddEdge(Edge.Parse("(N00)-(N04)"))
                        .AddEdge(Edge.Parse("(N00)-(N10)"))
                        .AddEdge(Edge.Parse("(N00)-(N11)"))
                        .AddEdge(Edge.Parse("(N00)-(N12)"))
                        .AddEdge(Edge.Parse("(N01)-(N07)"))
                        .AddEdge(Edge.Parse("(N01)-(N08)"))
                        .AddEdge(Edge.Parse("(N01)-(N10)"))
                        .AddEdge(Edge.Parse("(N01)-(N12)"))
                        .AddEdge(Edge.Parse("(N02)-(N04)"))
                        .AddEdge(Edge.Parse("(N03)-(N04)"))
                        .AddEdge(Edge.Parse("(N03)-(N05)"))
                        .AddEdge(Edge.Parse("(N03)-(N06)"))
                        .AddEdge(Edge.Parse("(N03)-(N08)"))
                        .AddEdge(Edge.Parse("(N04)-(N06)"))
                        .AddEdge(Edge.Parse("(N04)-(N11)"))
                        .AddEdge(Edge.Parse("(N05)-(N06)"))
                        .AddEdge(Edge.Parse("(N05)-(N07)"))
                        .AddEdge(Edge.Parse("(N05)-(N09)"))
                        .AddEdge(Edge.Parse("(N06)-(N09)"))
                        .AddEdge(Edge.Parse("(N07)-(N08)"))
                        .AddEdge(Edge.Parse("(N08)-(N11)"))
                        .AddEdge(Edge.Parse("(N10)-(N11)"))
                        .AddEdge(Edge.Parse("(N10)-(N12)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Black, Colour.White)
                        .AddNode(Node.FromName("N00"))
                        .AddNode(Node.FromName("N01"))
                        .AddNode(Node.FromName("N02"))
                        .AddNode(Node.FromName("N03"))
                        .AddNode(Node.FromName("N04"))
                        .AddNode(Node.FromName("N05"))
                        .AddNode(Node.FromName("N06"))
                        .AddNode(Node.FromName("N07"))
                        .AddNode(Node.FromName("N08"))
                        .AddNode(Node.FromName("N09"))
                        .AddNode(Node.FromName("N10"))
                        .AddNode(Node.FromName("N11"))
                        .AddNode(Node.FromName("N12"))
                        .AddNode(Node.FromName("N13"))
                        .AddEdge(Edge.Parse("(N00)-(N03)"))
                        .AddEdge(Edge.Parse("(N00)-(N05)"))
                        .AddEdge(Edge.Parse("(N00)-(N06)"))
                        .AddEdge(Edge.Parse("(N00)-(N07)"))
                        .AddEdge(Edge.Parse("(N00)-(N08)"))
                        .AddEdge(Edge.Parse("(N00)-(N09)"))
                        .AddEdge(Edge.Parse("(N00)-(N13)"))
                        .AddEdge(Edge.Parse("(N01)-(N02)"))
                        .AddEdge(Edge.Parse("(N01)-(N03)"))
                        .AddEdge(Edge.Parse("(N01)-(N05)"))
                        .AddEdge(Edge.Parse("(N01)-(N10)"))
                        .AddEdge(Edge.Parse("(N01)-(N12)"))
                        .AddEdge(Edge.Parse("(N02)-(N04)"))
                        .AddEdge(Edge.Parse("(N02)-(N10)"))
                        .AddEdge(Edge.Parse("(N02)-(N11)"))
                        .AddEdge(Edge.Parse("(N02)-(N12)"))
                        .AddEdge(Edge.Parse("(N03)-(N05)"))
                        .AddEdge(Edge.Parse("(N03)-(N08)"))
                        .AddEdge(Edge.Parse("(N04)-(N09)"))
                        .AddEdge(Edge.Parse("(N04)-(N10)"))
                        .AddEdge(Edge.Parse("(N04)-(N13)"))
                        .AddEdge(Edge.Parse("(N05)-(N07)"))
                        .AddEdge(Edge.Parse("(N06)-(N07)"))
                        .AddEdge(Edge.Parse("(N06)-(N11)"))
                        .AddEdge(Edge.Parse("(N07)-(N12)"))
                        .AddEdge(Edge.Parse("(N08)-(N09)"))
                        .AddEdge(Edge.Parse("(N08)-(N10)"))
                        .AddEdge(Edge.Parse("(N09)-(N13)"))
                        .AddEdge(Edge.Parse("(N11)-(N12)"))
                        .Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Blue, Colour.Yellow, Colour.Green)
                        .AddNodes([
                            Node.FromName("E"),
                            Node.FromName("K"),
                            Node.FromName("N"),
                            Node.FromName("S"),
                            Node.FromName("W")
                        ])
                        .AddEdges([
                            Edge.Parse("(E)-(K)"),
                            Edge.Parse("(E)-(N)"),
                            Edge.Parse("(E)-(S)"),
                            Edge.Parse("(K)-(N)"),
                            Edge.Parse("(K)-(S)"),
                            Edge.Parse("(N)-(S)"),
                            Edge.Parse("(N)-(W)"),
                            Edge.Parse("(S)-(W)")
                        ]).Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Black, Colour.White)
                        .AddNodes([
                            Node.FromName("NSW"),
                            Node.FromName("NT"),
                            Node.FromName("Q"),
                            Node.FromName("SA"),
                            Node.FromName("T"),
                            Node.FromName("V"),
                            Node.FromName("WA")
                        ])
                        .AddEdges([
                                Edge.Parse("(NSW)-(Q)"),
                                Edge.Parse("(NSW)-(SA)"),
                                Edge.Parse("(NSW)-(V)"),
                                Edge.Parse("(NT)-(Q)"),
                                Edge.Parse("(NT)-(SA)"),
                                Edge.Parse("(NT)-(WA)"),
                                Edge.Parse("(Q)-(SA)"),
                                Edge.Parse("(SA)-(V)"),
                                Edge.Parse("(SA)-(WA)")
                            ]
                        ).Build()
                ];

                yield return
                [
                    GraphColouringProblem.Create()
                        .UseGlobalColours(Colour.Red, Colour.White, Colour.Blue)
                        .AddNodes([
                            Node.FromName("A01"),
                            Node.FromName("A02"),
                            Node.FromName("A03"),
                            Node.FromName("A04"),
                            Node.FromName("A05"),
                            Node.FromName("A06"),
                            Node.FromName("A07"),
                            Node.FromName("A08"),
                            Node.FromName("A09"),
                            Node.FromName("A10"),
                            Node.FromName("A11"),
                            Node.FromName("A12"),
                            Node.FromName("A13"),
                            Node.FromName("A14"),
                            Node.FromName("A15"),
                            Node.FromName("A16"),
                            Node.FromName("A17"),
                            Node.FromName("A18"),
                            Node.FromName("A19"),
                            Node.FromName("A20")
                        ]).AddEdges([
                            Edge.Parse("(A01)-(A02)"),
                            Edge.Parse("(A01)-(A03)"),
                            Edge.Parse("(A01)-(A04)"),
                            Edge.Parse("(A01)-(A06)"),
                            Edge.Parse("(A01)-(A07)"),
                            Edge.Parse("(A01)-(A08)"),
                            Edge.Parse("(A01)-(A09)"),
                            Edge.Parse("(A02)-(A03)"),
                            Edge.Parse("(A02)-(A09)"),
                            Edge.Parse("(A02)-(A10)"),
                            Edge.Parse("(A03)-(A04)"),
                            Edge.Parse("(A03)-(A10)"),
                            Edge.Parse("(A03)-(A11)"),
                            Edge.Parse("(A04)-(A05)"),
                            Edge.Parse("(A04)-(A11)"),
                            Edge.Parse("(A04)-(A12)"),
                            Edge.Parse("(A05)-(A06)"),
                            Edge.Parse("(A05)-(A13)"),
                            Edge.Parse("(A05)-(A14)"),
                            Edge.Parse("(A06)-(A07)"),
                            Edge.Parse("(A06)-(A14)"),
                            Edge.Parse("(A06)-(A15)"),
                            Edge.Parse("(A07)-(A08)"),
                            Edge.Parse("(A07)-(A15)"),
                            Edge.Parse("(A07)-(A16)"),
                            Edge.Parse("(A08)-(A09)"),
                            Edge.Parse("(A08)-(A16)"),
                            Edge.Parse("(A08)-(A17)"),
                            Edge.Parse("(A09)-(A10)"),
                            Edge.Parse("(A09)-(A18)"),
                            Edge.Parse("(A10)-(A11)"),
                            Edge.Parse("(A10)-(A18)"),
                            Edge.Parse("(A10)-(A19)"),
                            Edge.Parse("(A11)-(A12)"),
                            Edge.Parse("(A11)-(A20)"),
                            Edge.Parse("(A12)-(A13)"),
                            Edge.Parse("(A12)-(A20)"),
                            Edge.Parse("(A13)-(A14)"),
                            Edge.Parse("(A14)-(A15)"),
                            Edge.Parse("(A15)-(A16)"),
                            Edge.Parse("(A16)-(A17)"),
                            Edge.Parse("(A17)-(A18)"),
                            Edge.Parse("(A18)-(A19)"),
                            Edge.Parse("(A19)-(A20)")
                        ]).Build()
                ];
            }

            IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
        }
    }
}
