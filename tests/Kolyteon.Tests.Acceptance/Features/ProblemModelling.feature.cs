// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kolyteon.Tests.Acceptance.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ProblemModellingFeature : object, Xunit.IClassFixture<ProblemModellingFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ProblemModelling.feature"
#line hidden
        
        public ProblemModellingFeature(ProblemModellingFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Problem Modelling", "Model any valid instance of a given problem type as a generic binary CSP.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Model a Futoshiki problem")]
        [Xunit.TraitAttribute("FeatureTitle", "Problem Modelling")]
        [Xunit.TraitAttribute("Description", "Model a Futoshiki problem")]
        [Xunit.TraitAttribute("Category", "A/3")]
        public async System.Threading.Tasks.Task ModelAFutoshikiProblem()
        {
            string[] tagsOfScenario = new string[] {
                    "A/3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Model a Futoshiki problem", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
        await testRunner.GivenAsync("I have created a Futoshiki problem matching the following diagram", "+---+---+---+---+\r\n|   | 2 <   |   |\r\n+-<-+---+---+->-+\r\n|   <   |   | 1 |\r\n+---+" +
                        "---+---+---+\r\n| 3 |   > 1 |   |\r\n+---+->-+---+---+\r\n| 4 >   |   | 3 |\r\n+---+---+" +
                        "---+---+", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 19
        await testRunner.WhenAsync("I model the Futoshiki problem as a binary CSP", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 20
        await testRunner.ThenAsync("the Futoshiki binary CSP should have 10 variables", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 21
        await testRunner.AndAsync("the Futoshiki binary CSP should have 8 constraints", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
        await testRunner.AndAsync("the Futoshiki binary CSP should have a constraint density of 0.177778", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
        await testRunner.AndAsync("the Futoshiki binary CSP should have a harmonic mean tightness of 0.4", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Model a Graph Colouring problem")]
        [Xunit.TraitAttribute("FeatureTitle", "Problem Modelling")]
        [Xunit.TraitAttribute("Description", "Model a Graph Colouring problem")]
        [Xunit.TraitAttribute("Category", "B/3")]
        public async System.Threading.Tasks.Task ModelAGraphColouringProblem()
        {
            string[] tagsOfScenario = new string[] {
                    "B/3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Model a Graph Colouring problem", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Node",
                            "Permitted Colours",
                            "Adjacent Nodes"});
                table1.AddRow(new string[] {
                            "A",
                            "Red, Blue, Green",
                            "B, C, D, G"});
                table1.AddRow(new string[] {
                            "B",
                            "Blue, Green",
                            "A, F"});
                table1.AddRow(new string[] {
                            "C",
                            "Red, Blue",
                            "A, G"});
                table1.AddRow(new string[] {
                            "D",
                            "Red, Blue",
                            "A, E, G, H"});
                table1.AddRow(new string[] {
                            "E",
                            "Blue, Green",
                            "D, F, G"});
                table1.AddRow(new string[] {
                            "F",
                            "Red, Green, Yellow",
                            "B, E"});
                table1.AddRow(new string[] {
                            "G",
                            "Red, Blue",
                            "A, C, D, E"});
                table1.AddRow(new string[] {
                            "H",
                            "Yellow",
                            "D"});
#line 27
        await testRunner.GivenAsync("I have created a Graph Colouring problem with the following nodes and edges", ((string)(null)), table1, "Given ");
#line hidden
#line 37
        await testRunner.WhenAsync("I model the Graph Colouring problem as a binary CSP", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
        await testRunner.ThenAsync("the Graph Colouring binary CSP should have 8 variables", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 39
        await testRunner.AndAsync("the Graph Colouring binary CSP should have 10 constraints", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
        await testRunner.AndAsync("the Graph Colouring binary CSP should have a constraint density of 0.357143", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 41
        await testRunner.AndAsync("the Graph Colouring binary CSP should have a harmonic mean tightness of 0.277777", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Model a Map Colouring problem")]
        [Xunit.TraitAttribute("FeatureTitle", "Problem Modelling")]
        [Xunit.TraitAttribute("Description", "Model a Map Colouring problem")]
        [Xunit.TraitAttribute("Category", "C/3")]
        public async System.Threading.Tasks.Task ModelAMapColouringProblem()
        {
            string[] tagsOfScenario = new string[] {
                    "C/3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Model a Map Colouring problem", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Block",
                            "Permitted Colours"});
                table2.AddRow(new string[] {
                            "(0,6) [5x2]",
                            "Red, Blue, Green"});
                table2.AddRow(new string[] {
                            "(0,8) [10x2]",
                            "Red"});
                table2.AddRow(new string[] {
                            "(1,0) [3x1]",
                            "Red, Blue, Green"});
                table2.AddRow(new string[] {
                            "(1,1) [3x3]",
                            "Red, Yellow"});
                table2.AddRow(new string[] {
                            "(4,0) [4x2]",
                            "Red, Blue, Green"});
                table2.AddRow(new string[] {
                            "(4,4) [6x2]",
                            "Red, Blue, Green, Yellow"});
                table2.AddRow(new string[] {
                            "(5,6) [5x2]",
                            "Red, Blue, Green"});
                table2.AddRow(new string[] {
                            "(8,0) [2x1]",
                            "Red, Green"});
                table2.AddRow(new string[] {
                            "(8,1) [2x1]",
                            "Blue"});
#line 45
        await testRunner.GivenAsync("I have created a Map Colouring problem with a 10x10 canvas and the following bloc" +
                        "ks", ((string)(null)), table2, "Given ");
#line hidden
#line 56
        await testRunner.WhenAsync("I model the Map Colouring problem as a binary CSP", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 57
        await testRunner.ThenAsync("the Map Colouring binary CSP should have 9 variables", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 58
        await testRunner.AndAsync("the Map Colouring binary CSP should have 10 constraints", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 59
        await testRunner.AndAsync("the Map Colouring binary CSP should have a constraint density of 0.277778", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 60
        await testRunner.AndAsync("the Map Colouring binary CSP should have a harmonic mean constraint tightness of " +
                        "0.263158", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ProblemModellingFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ProblemModellingFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
