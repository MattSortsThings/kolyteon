// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kolyteon.Tests.Acceptance.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ProblemSolvingFeature : object, Xunit.IClassFixture<ProblemSolvingFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ProblemSolving.feature"
#line hidden
        
        public ProblemSolvingFeature(ProblemSolvingFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Problem Solving", "Solve an instance of a problem type modelled as a binary CSP.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Solve a Futoshiki problem")]
        [Xunit.TraitAttribute("FeatureTitle", "Problem Solving")]
        [Xunit.TraitAttribute("Description", "Solve a Futoshiki problem")]
        [Xunit.TraitAttribute("Category", "A/5")]
        [Xunit.TraitAttribute("Category", "H/1")]
        [Xunit.InlineDataAttribute("BT", "NO", new string[0])]
        [Xunit.InlineDataAttribute("BT", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("BT", "MC", new string[0])]
        [Xunit.InlineDataAttribute("BT", "MT", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "NO", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "MC", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "MT", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "NO", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "MC", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "MT", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "NO", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "MC", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "MT", new string[0])]
        [Xunit.InlineDataAttribute("FC", "NO", new string[0])]
        [Xunit.InlineDataAttribute("FC", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("FC", "MC", new string[0])]
        [Xunit.InlineDataAttribute("FC", "MT", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "NO", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "MC", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "MT", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "NO", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "MC", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "MT", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "NO", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "MC", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "MT", new string[0])]
        public async System.Threading.Tasks.Task SolveAFutoshikiProblem(string checking, string ordering, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "A/5",
                    "H/1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Checking", checking);
            argumentsOfScenario.Add("Ordering", ordering);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Solve a Futoshiki problem", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
        await testRunner.GivenAsync("I have created a Futoshiki problem matching the following diagram", "+---+---+---+---+\r\n|   | 2 <   |   |\r\n+-<-+---+---+->-+\r\n|   <   |   | 1 |\r\n+---+" +
                        "---+---+---+\r\n| 3 |   > 1 |   |\r\n+---+->-+---+---+\r\n| 4 >   |   | 3 |\r\n+---+---+" +
                        "---+---+", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 20
        await testRunner.AndAsync("I have modelled the Futoshiki problem as a binary CSP", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
        await testRunner.WhenAsync(string.Format("I solve the Futoshiki binary CSP using the \'{0}\'+\'{1}\' search algorithm", checking, ordering), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
        await testRunner.AndAsync("I ask the Futoshiki problem to verify the correctness of the proposed solution", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
        await testRunner.ThenAsync("the verification result should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Solve a Graph Colouring problem")]
        [Xunit.TraitAttribute("FeatureTitle", "Problem Solving")]
        [Xunit.TraitAttribute("Description", "Solve a Graph Colouring problem")]
        [Xunit.TraitAttribute("Category", "B/5")]
        [Xunit.TraitAttribute("Category", "H/1")]
        [Xunit.InlineDataAttribute("BT", "NO", new string[0])]
        [Xunit.InlineDataAttribute("BT", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("BT", "MC", new string[0])]
        [Xunit.InlineDataAttribute("BT", "MT", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "NO", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "MC", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "MT", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "NO", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "MC", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "MT", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "NO", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "MC", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "MT", new string[0])]
        [Xunit.InlineDataAttribute("FC", "NO", new string[0])]
        [Xunit.InlineDataAttribute("FC", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("FC", "MC", new string[0])]
        [Xunit.InlineDataAttribute("FC", "MT", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "NO", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "MC", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "MT", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "NO", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "MC", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "MT", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "NO", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "MC", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "MT", new string[0])]
        public async System.Threading.Tasks.Task SolveAGraphColouringProblem(string checking, string ordering, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "B/5",
                    "H/1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Checking", checking);
            argumentsOfScenario.Add("Ordering", ordering);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Solve a Graph Colouring problem", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Node",
                            "Permitted Colours",
                            "Adjacent Nodes"});
                table5.AddRow(new string[] {
                            "A",
                            "Red, Blue, Green",
                            "B, C, D, G"});
                table5.AddRow(new string[] {
                            "B",
                            "Blue, Green",
                            "A, F"});
                table5.AddRow(new string[] {
                            "C",
                            "Red, Blue",
                            "A, G"});
                table5.AddRow(new string[] {
                            "D",
                            "Red, Blue",
                            "A, E, G, H"});
                table5.AddRow(new string[] {
                            "E",
                            "Blue, Green",
                            "D, F, G"});
                table5.AddRow(new string[] {
                            "F",
                            "Red, Green, Yellow",
                            "B, E"});
                table5.AddRow(new string[] {
                            "G",
                            "Red, Blue",
                            "A, C, D, E"});
                table5.AddRow(new string[] {
                            "H",
                            "Yellow",
                            "D"});
#line 63
        await testRunner.GivenAsync("I have created a Graph Colouring problem with the following nodes and edges", ((string)(null)), table5, "Given ");
#line hidden
#line 73
        await testRunner.AndAsync("I have modelled the Graph Colouring problem as a binary CSP", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 74
        await testRunner.WhenAsync(string.Format("I solve the Graph Colouring binary CSP using the \'{0}\'+\'{1}\' search algorithm", checking, ordering), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 75
        await testRunner.AndAsync("I ask the Graph Colouring problem to verify the correctness of the proposed solut" +
                        "ion", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 76
        await testRunner.ThenAsync("the verification result should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Solve a Map Colouring problem")]
        [Xunit.TraitAttribute("FeatureTitle", "Problem Solving")]
        [Xunit.TraitAttribute("Description", "Solve a Map Colouring problem")]
        [Xunit.TraitAttribute("Category", "C/5")]
        [Xunit.TraitAttribute("Category", "H/1")]
        [Xunit.InlineDataAttribute("BT", "NO", new string[0])]
        [Xunit.InlineDataAttribute("BT", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("BT", "MC", new string[0])]
        [Xunit.InlineDataAttribute("BT", "MT", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "NO", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "MC", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "MT", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "NO", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "MC", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "MT", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "NO", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "MC", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "MT", new string[0])]
        [Xunit.InlineDataAttribute("FC", "NO", new string[0])]
        [Xunit.InlineDataAttribute("FC", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("FC", "MC", new string[0])]
        [Xunit.InlineDataAttribute("FC", "MT", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "NO", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "MC", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "MT", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "NO", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "MC", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "MT", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "NO", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "MC", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "MT", new string[0])]
        public async System.Threading.Tasks.Task SolveAMapColouringProblem(string checking, string ordering, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "C/5",
                    "H/1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Checking", checking);
            argumentsOfScenario.Add("Ordering", ordering);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Solve a Map Colouring problem", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 115
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Block",
                            "Permitted Colours"});
                table6.AddRow(new string[] {
                            "(0,6) [5x2]",
                            "Red, Blue, Green"});
                table6.AddRow(new string[] {
                            "(0,8) [10x2]",
                            "Red"});
                table6.AddRow(new string[] {
                            "(1,0) [3x1]",
                            "Red, Blue, Green"});
                table6.AddRow(new string[] {
                            "(1,1) [3x3]",
                            "Red, Yellow"});
                table6.AddRow(new string[] {
                            "(4,0) [4x2]",
                            "Red, Blue, Green"});
                table6.AddRow(new string[] {
                            "(4,4) [6x2]",
                            "Red, Blue, Green, Yellow"});
                table6.AddRow(new string[] {
                            "(5,6) [5x2]",
                            "Red, Blue, Green"});
                table6.AddRow(new string[] {
                            "(8,0) [2x1]",
                            "Red, Green"});
                table6.AddRow(new string[] {
                            "(8,1) [2x1]",
                            "Blue"});
#line 116
        await testRunner.GivenAsync("I have created a Map Colouring problem with a 10x10 canvas and the following bloc" +
                        "ks", ((string)(null)), table6, "Given ");
#line hidden
#line 127
        await testRunner.AndAsync("I have modelled the Map Colouring problem as a binary CSP", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 128
        await testRunner.WhenAsync(string.Format("I solve the Map Colouring binary CSP using the \'{0}\'+\'{1}\' search algorithm", checking, ordering), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 129
        await testRunner.AndAsync("I ask the Map Colouring problem to verify the correctness of the proposed solutio" +
                        "n", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 130
        await testRunner.ThenAsync("the verification result should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Solve an N-Queens problem")]
        [Xunit.TraitAttribute("FeatureTitle", "Problem Solving")]
        [Xunit.TraitAttribute("Description", "Solve an N-Queens problem")]
        [Xunit.TraitAttribute("Category", "D/4")]
        [Xunit.TraitAttribute("Category", "H/1")]
        [Xunit.InlineDataAttribute("BT", "NO", new string[0])]
        [Xunit.InlineDataAttribute("BT", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("BT", "MC", new string[0])]
        [Xunit.InlineDataAttribute("BT", "MT", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "NO", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "MC", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "MT", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "NO", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "MC", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "MT", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "NO", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "MC", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "MT", new string[0])]
        [Xunit.InlineDataAttribute("FC", "NO", new string[0])]
        [Xunit.InlineDataAttribute("FC", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("FC", "MC", new string[0])]
        [Xunit.InlineDataAttribute("FC", "MT", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "NO", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "MC", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "MT", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "NO", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "MC", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "MT", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "NO", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "MC", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "MT", new string[0])]
        public async System.Threading.Tasks.Task SolveAnN_QueensProblem(string checking, string ordering, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "D/4",
                    "H/1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Checking", checking);
            argumentsOfScenario.Add("Ordering", ordering);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Solve an N-Queens problem", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 169
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 170
        await testRunner.GivenAsync("I have created an N-Queens problem for N = 5", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 171
        await testRunner.AndAsync("I have modelled the N-Queens problem as a binary CSP", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 172
        await testRunner.WhenAsync(string.Format("I solve the N-Queens binary CSP using the \'{0}\'+\'{1}\' search algorithm", checking, ordering), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 173
        await testRunner.AndAsync("I ask the N-Queens problem to verify the correctness of the proposed solution", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 174
        await testRunner.ThenAsync("the verification result should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Solve a Shikaku problem")]
        [Xunit.TraitAttribute("FeatureTitle", "Problem Solving")]
        [Xunit.TraitAttribute("Description", "Solve a Shikaku problem")]
        [Xunit.TraitAttribute("Category", "E/5")]
        [Xunit.TraitAttribute("Category", "H/1")]
        [Xunit.InlineDataAttribute("BT", "NO", new string[0])]
        [Xunit.InlineDataAttribute("BT", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("BT", "MC", new string[0])]
        [Xunit.InlineDataAttribute("BT", "MT", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "NO", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "MC", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "MT", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "NO", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "MC", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "MT", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "NO", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "MC", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "MT", new string[0])]
        [Xunit.InlineDataAttribute("FC", "NO", new string[0])]
        [Xunit.InlineDataAttribute("FC", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("FC", "MC", new string[0])]
        [Xunit.InlineDataAttribute("FC", "MT", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "NO", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "MC", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "MT", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "NO", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "MC", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "MT", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "NO", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "MC", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "MT", new string[0])]
        public async System.Threading.Tasks.Task SolveAShikakuProblem(string checking, string ordering, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "E/5",
                    "H/1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Checking", checking);
            argumentsOfScenario.Add("Ordering", ordering);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Solve a Shikaku problem", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 213
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 214
        await testRunner.GivenAsync("I have created a Shikaku problem from the following grid", "05 __ __ __ __\r\n__ __ 08 __ __\r\n__ __ __ 04 __\r\n__ __ __ 06 02\r\n__ __ __ __ __", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 222
        await testRunner.AndAsync("I have modelled the Shikaku problem as a binary CSP", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 223
        await testRunner.WhenAsync(string.Format("I solve the Shikaku binary CSP using the \'{0}\'+\'{1}\' search algorithm", checking, ordering), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 224
        await testRunner.AndAsync("I ask the Shikaku problem to verify the correctness of the proposed solution", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 225
        await testRunner.ThenAsync("the verification result should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Solve a Sudoku problem")]
        [Xunit.TraitAttribute("FeatureTitle", "Problem Solving")]
        [Xunit.TraitAttribute("Description", "Solve a Sudoku problem")]
        [Xunit.TraitAttribute("Category", "F/5")]
        [Xunit.TraitAttribute("Category", "H/1")]
        [Xunit.InlineDataAttribute("BT", "NO", new string[0])]
        [Xunit.InlineDataAttribute("BT", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("BT", "MC", new string[0])]
        [Xunit.InlineDataAttribute("BT", "MT", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "NO", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "MC", new string[0])]
        [Xunit.InlineDataAttribute("BJ", "MT", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "NO", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "MC", new string[0])]
        [Xunit.InlineDataAttribute("GBJ", "MT", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "NO", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "MC", new string[0])]
        [Xunit.InlineDataAttribute("CBJ", "MT", new string[0])]
        [Xunit.InlineDataAttribute("FC", "NO", new string[0])]
        [Xunit.InlineDataAttribute("FC", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("FC", "MC", new string[0])]
        [Xunit.InlineDataAttribute("FC", "MT", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "NO", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "MC", new string[0])]
        [Xunit.InlineDataAttribute("PLA", "MT", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "NO", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "MC", new string[0])]
        [Xunit.InlineDataAttribute("FLA", "MT", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "NO", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "BZ", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "MC", new string[0])]
        [Xunit.InlineDataAttribute("MAC", "MT", new string[0])]
        public async System.Threading.Tasks.Task SolveASudokuProblem(string checking, string ordering, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "F/5",
                    "H/1"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Checking", checking);
            argumentsOfScenario.Add("Ordering", ordering);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Solve a Sudoku problem", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 264
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 265
        await testRunner.GivenAsync("I have created a Sudoku problem from the following grid", "__ 02 __ __ __ 06 07 08 __\r\n__ 05 06 07 08 09 01 02 03\r\n__ 08 09 01 02 03 04 05 0" +
                        "6\r\n08 09 01 02 03 04 05 06 07\r\n02 03 04 05 __ 07 08 09 01\r\n05 06 07 08 09 01 02 " +
                        "03 04\r\n06 07 08 09 01 02 03 04 05\r\n09 01 02 03 04 05 06 07 08\r\n__ 04 05 06 __ 08" +
                        " 09 01 __", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 277
        await testRunner.AndAsync("I have modelled the Sudoku problem as a binary CSP", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 278
        await testRunner.WhenAsync(string.Format("I solve the Sudoku binary CSP using the \'{0}\'+\'{1}\' search algorithm", checking, ordering), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 279
        await testRunner.AndAsync("I ask the Sudoku problem to verify the correctness of the proposed solution", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 280
        await testRunner.ThenAsync("the verification result should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ProblemSolvingFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ProblemSolvingFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
