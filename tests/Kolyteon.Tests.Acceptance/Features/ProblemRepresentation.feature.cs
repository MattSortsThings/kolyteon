// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kolyteon.Tests.Acceptance.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ProblemRepresentationFeature : object, Xunit.IClassFixture<ProblemRepresentationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ProblemRepresentation.feature"
#line hidden
        
        public ProblemRepresentationFeature(ProblemRepresentationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Problem Representation", "Represent any valid instance of a given problem type as an immutable, serializabl" +
                    "e data structure.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Represent an N-Queens problem")]
        [Xunit.TraitAttribute("FeatureTitle", "Problem Representation")]
        [Xunit.TraitAttribute("Description", "Represent an N-Queens problem")]
        [Xunit.TraitAttribute("Category", "D/1")]
        public async System.Threading.Tasks.Task RepresentAnN_QueensProblem()
        {
            string[] tagsOfScenario = new string[] {
                    "D/1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Represent an N-Queens problem", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
        await testRunner.GivenAsync("I have created an N-Queens problem for N = 8", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
        await testRunner.AndAsync("I have serialized the N-Queens problem to JSON", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 9
        await testRunner.WhenAsync("I deserialize an N-Queens problem from the JSON", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
        await testRunner.ThenAsync("the deserialized and original N-Queens problems should be equal", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Represent a Shikaku problem")]
        [Xunit.TraitAttribute("FeatureTitle", "Problem Representation")]
        [Xunit.TraitAttribute("Description", "Represent a Shikaku problem")]
        [Xunit.TraitAttribute("Category", "E/1")]
        public async System.Threading.Tasks.Task RepresentAShikakuProblem()
        {
            string[] tagsOfScenario = new string[] {
                    "E/1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Represent a Shikaku problem", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 14
        await testRunner.GivenAsync("I have created a Shikaku problem from the following grid", @"03 __ __ __ __ __ __ 07 __ __
__ __ __ __ __ __ __ __ __ __
__ __ __ __ __ __ __ __ __ __
__ __ __ 14 __ __ __ __ __ __
__ __ __ __ __ __ __ __ __ __
05 __ 10 __ __ __ 21 __ __ __
03 __ __ __ __ __ __ __ __ __
__ __ 03 __ __ __ __ __ __ __
__ __ __ __ __ __ __ 16 __ __
__ __ __ __ __ __ __ __ __ 18", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 27
        await testRunner.AndAsync("I have serialized the Shikaku problem to JSON", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
        await testRunner.WhenAsync("I deserialize a Shikaku problem from the JSON", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 29
        await testRunner.ThenAsync("the deserialized and original Shikaku problems should be equal", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ProblemRepresentationFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ProblemRepresentationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
