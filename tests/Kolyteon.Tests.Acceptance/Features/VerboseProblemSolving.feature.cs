// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kolyteon.Tests.Acceptance.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class VerboseProblemSolvingFeature : object, Xunit.IClassFixture<VerboseProblemSolvingFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "VerboseProblemSolving.feature"
#line hidden
        
        public VerboseProblemSolvingFeature(VerboseProblemSolvingFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Verbose Problem Solving", "Solve an instance of a problem type modelled as a binary CSP, reporting progress " +
                    "at every step.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Solve an N-Queens problem with reporting")]
        [Xunit.TraitAttribute("FeatureTitle", "Verbose Problem Solving")]
        [Xunit.TraitAttribute("Description", "Solve an N-Queens problem with reporting")]
        [Xunit.TraitAttribute("Category", "D/4")]
        [Xunit.TraitAttribute("Category", "I/1")]
        public async System.Threading.Tasks.Task SolveAnN_QueensProblemWithReporting()
        {
            string[] tagsOfScenario = new string[] {
                    "D/4",
                    "I/1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Solve an N-Queens problem with reporting", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
        await testRunner.GivenAsync("I have created an N-Queens problem for N = 4", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
        await testRunner.AndAsync("I have modelled the N-Queens problem as a binary CSP", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
        await testRunner.WhenAsync("I solve the N-Queens binary CSP using the verbose solver configured with the \'BT\'" +
                        "+\'NO\' search algorithm", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 11
        await testRunner.AndAsync("I ask the N-Queens problem to verify the correctness of the proposed solution", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
        await testRunner.ThenAsync("the verification result should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 13
        await testRunner.AndAsync("the solving progress reporter should have 16 total steps", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
        await testRunner.AndAsync("the solving progress reporter should have 1 simplifying step", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
        await testRunner.AndAsync("the solving progress reporter should have 11 assigning steps", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
        await testRunner.AndAsync("the solving progress reporter should have 4 backtracking steps", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table15 = new global::Reqnroll.Table(new string[] {
                            "Total Steps",
                            "Search Level",
                            "Solving State",
                            "Squares"});
                table15.AddRow(new string[] {
                            "1",
                            "0",
                            "Assigning",
                            ""});
                table15.AddRow(new string[] {
                            "2",
                            "1",
                            "Assigning",
                            "(0,0)"});
                table15.AddRow(new string[] {
                            "3",
                            "2",
                            "Assigning",
                            "(0,0), (1,2)"});
                table15.AddRow(new string[] {
                            "4",
                            "2",
                            "Backtracking",
                            "(0,0), (1,2)"});
                table15.AddRow(new string[] {
                            "5",
                            "1",
                            "Assigning",
                            "(0,0)"});
                table15.AddRow(new string[] {
                            "6",
                            "2",
                            "Assigning",
                            "(0,0), (1,3)"});
                table15.AddRow(new string[] {
                            "7",
                            "3",
                            "Assigning",
                            "(0,0), (1,3), (2,1)"});
                table15.AddRow(new string[] {
                            "8",
                            "3",
                            "Backtracking",
                            "(0,0), (1,3), (2,1)"});
                table15.AddRow(new string[] {
                            "9",
                            "2",
                            "Assigning",
                            "(0,0), (1,3)"});
                table15.AddRow(new string[] {
                            "10",
                            "2",
                            "Backtracking",
                            "(0,0), (1,3)"});
                table15.AddRow(new string[] {
                            "11",
                            "1",
                            "Backtracking",
                            "(0,0)"});
                table15.AddRow(new string[] {
                            "12",
                            "0",
                            "Assigning",
                            ""});
                table15.AddRow(new string[] {
                            "13",
                            "1",
                            "Assigning",
                            "(0,1)"});
                table15.AddRow(new string[] {
                            "14",
                            "2",
                            "Assigning",
                            "(0,1), (1,3)"});
                table15.AddRow(new string[] {
                            "15",
                            "3",
                            "Assigning",
                            "(0,1), (1,3), (2,0)"});
                table15.AddRow(new string[] {
                            "16",
                            "4",
                            "Finished",
                            "(0,1), (1,3), (2,0), (3,2)"});
#line 17
        await testRunner.AndAsync("the solving progress reports should be as follows", ((string)(null)), table15, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await VerboseProblemSolvingFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await VerboseProblemSolvingFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
