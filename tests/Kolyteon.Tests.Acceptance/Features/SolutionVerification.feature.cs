// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Kolyteon.Tests.Acceptance.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SolutionVerificationFeature : object, Xunit.IClassFixture<SolutionVerificationFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SolutionVerification.feature"
#line hidden
        
        public SolutionVerificationFeature(SolutionVerificationFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Solution Verification", "Verify the correctness of any proposed solution to any valid instance of a given " +
                    "problem type.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            global::Reqnroll.xUnit.ReqnrollPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify a Map Colouring problem solution")]
        [Xunit.TraitAttribute("FeatureTitle", "Solution Verification")]
        [Xunit.TraitAttribute("Description", "Verify a Map Colouring problem solution")]
        [Xunit.TraitAttribute("Category", "C/2")]
        public async System.Threading.Tasks.Task VerifyAMapColouringProblemSolution()
        {
            string[] tagsOfScenario = new string[] {
                    "C/2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify a Map Colouring problem solution", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Block",
                            "Permitted Colours"});
                table2.AddRow(new string[] {
                            "(0,6) [5x2]",
                            "Red,Blue,Green"});
                table2.AddRow(new string[] {
                            "(0,8) [10x2]",
                            "Red"});
                table2.AddRow(new string[] {
                            "(1,0) [3x1]",
                            "Red,Blue,Green"});
                table2.AddRow(new string[] {
                            "(1,1) [3x3]",
                            "Red,Yellow"});
                table2.AddRow(new string[] {
                            "(4,0) [4x2]",
                            "Red,Blue,Green"});
                table2.AddRow(new string[] {
                            "(4,4) [6x2]",
                            "Red,Blue,Green,Yellow"});
                table2.AddRow(new string[] {
                            "(5,6) [5x2]",
                            "Red,Blue,Green"});
                table2.AddRow(new string[] {
                            "(8,0) [2x1]",
                            "Red,Green"});
                table2.AddRow(new string[] {
                            "(8,1) [1x1]",
                            "Red"});
                table2.AddRow(new string[] {
                            "(9,1) [1x1]",
                            "Yellow"});
#line 7
        await testRunner.GivenAsync("I have created a Map Colouring problem with a 10x10 canvas and the following bloc" +
                        "ks", ((string)(null)), table2, "Given ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Block",
                            "Colour"});
                table3.AddRow(new string[] {
                            "(0,6) [5x2]",
                            "Blue"});
                table3.AddRow(new string[] {
                            "(0,8) [10x2]",
                            "Red"});
                table3.AddRow(new string[] {
                            "(1,0) [3x1]",
                            "Red"});
                table3.AddRow(new string[] {
                            "(1,1) [3x3]",
                            "Yellow"});
                table3.AddRow(new string[] {
                            "(4,0) [4x2]",
                            "Blue"});
                table3.AddRow(new string[] {
                            "(4,4) [6x2]",
                            "Red"});
                table3.AddRow(new string[] {
                            "(5,6) [5x2]",
                            "Green"});
                table3.AddRow(new string[] {
                            "(8,0) [2x1]",
                            "Green"});
                table3.AddRow(new string[] {
                            "(8,1) [1x1]",
                            "Red"});
                table3.AddRow(new string[] {
                            "(9,1) [1x1]",
                            "Yellow"});
#line 19
        await testRunner.AndAsync("I have proposed the following block and colour dictionary as a solution to the Ma" +
                        "p Colouring problem", ((string)(null)), table3, "And ");
#line hidden
#line 31
        await testRunner.WhenAsync("I ask the Map Colouring problem to verify the correctness of the proposed solutio" +
                        "n", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
        await testRunner.ThenAsync("the verification result should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify an N-Queens problem solution")]
        [Xunit.TraitAttribute("FeatureTitle", "Solution Verification")]
        [Xunit.TraitAttribute("Description", "Verify an N-Queens problem solution")]
        [Xunit.TraitAttribute("Category", "D/2")]
        public async System.Threading.Tasks.Task VerifyAnN_QueensProblemSolution()
        {
            string[] tagsOfScenario = new string[] {
                    "D/2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify an N-Queens problem solution", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 36
        await testRunner.GivenAsync("I have created an N-Queens problem for N = 8", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Square"});
                table4.AddRow(new string[] {
                            "(0,6)"});
                table4.AddRow(new string[] {
                            "(1,4)"});
                table4.AddRow(new string[] {
                            "(2,2)"});
                table4.AddRow(new string[] {
                            "(3,0)"});
                table4.AddRow(new string[] {
                            "(4,5)"});
                table4.AddRow(new string[] {
                            "(5,7)"});
                table4.AddRow(new string[] {
                            "(6,1)"});
                table4.AddRow(new string[] {
                            "(7,3)"});
#line 37
        await testRunner.AndAsync("I have proposed the following squares as a solution to the N-Queens problem", ((string)(null)), table4, "And ");
#line hidden
#line 47
        await testRunner.WhenAsync("I ask the N-Queens problem to verify the correctness of the proposed solution", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 48
        await testRunner.ThenAsync("the verification result should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify a Shikaku problem solution")]
        [Xunit.TraitAttribute("FeatureTitle", "Solution Verification")]
        [Xunit.TraitAttribute("Description", "Verify a Shikaku problem solution")]
        [Xunit.TraitAttribute("Category", "E/2")]
        public async System.Threading.Tasks.Task VerifyAShikakuProblemSolution()
        {
            string[] tagsOfScenario = new string[] {
                    "E/2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify a Shikaku problem solution", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 52
        await testRunner.GivenAsync("I have created a Shikaku problem from the following grid", @"03 __ __ __ __ __ __ 07 __ __
__ __ __ __ __ __ __ __ __ __
__ __ __ __ __ __ __ __ __ __
__ __ __ 14 __ __ __ __ __ __
__ __ __ __ __ __ __ __ __ __
05 __ 10 __ __ __ 21 __ __ __
03 __ __ __ __ __ __ __ __ __
__ __ 03 __ __ __ __ __ __ __
__ __ __ __ __ __ __ 16 __ __
__ __ __ __ __ __ __ __ __ 18", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Block"});
                table5.AddRow(new string[] {
                            "(0,0) [3x1]"});
                table5.AddRow(new string[] {
                            "(0,1) [1x5]"});
                table5.AddRow(new string[] {
                            "(0,6) [3x1]"});
                table5.AddRow(new string[] {
                            "(0,7) [3x1]"});
                table5.AddRow(new string[] {
                            "(0,8) [8x2]"});
                table5.AddRow(new string[] {
                            "(1,1) [2x5]"});
                table5.AddRow(new string[] {
                            "(3,0) [7x1]"});
                table5.AddRow(new string[] {
                            "(3,1) [2x7]"});
                table5.AddRow(new string[] {
                            "(5,1) [3x7]"});
                table5.AddRow(new string[] {
                            "(8,1) [2x9]"});
#line 65
        await testRunner.AndAsync("I have proposed the following blocks as a solution to the Shikaku problem", ((string)(null)), table5, "And ");
#line hidden
#line 77
        await testRunner.WhenAsync("I ask the Shikaku problem to verify the correctness of the proposed solution", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 78
        await testRunner.ThenAsync("the verification result should be successful", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await SolutionVerificationFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await SolutionVerificationFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
